<File version="3.2">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>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
vXi+3ypjbW2t6oy1Znr7+9JlVeb6td5tVFVVqa6+QY2NDapZvp49r67eXM9/ndVr/9a6ujrvb/+1
ALAbB9r12tTMnEJdtTpydK8OncrUw6IiHdyxW8eTMlV4J1sxm3fp7NmrysktUGlple7m3lHe/Sov
AOztvm3t8tnn7/LpcDofAKFQv3r7Aur7yOzt7Qv7gLXa8+wDt7e3N6L29PR4RbpyeTB6JQDc1a4n
/AHQaAZ2e1Af+8q4r6/vRc3zu68vqP5gjx4UFqjoUbUCz15F2/XRwOCAeaUcUHdnlzo7up5dZq8b
8H4GzXphYKBfAfN70Pze0dGu1rZ2dXR1L70at/MIBNXT3anOri7vcdlSV6GCwgfq6rXvSgQUCobU
3FSt1o5uDfSHflk2o10Oexsv/DTzsesl/3T+6dvb21VfX+9tr/BbAbB8vv34YsycZ7d/WFiY1/jI
kEbs6fk5jQwNamxy6XgJ9htt7fYR7/IFkd0lP6oCwH5NsPeHz82aPzz8Qk1MmFeJU+ZOMdd/5eGD
zWX2s6Gwl72m9o4PmTunprZBPeYB1PuR2d3T5/1t4f52+4C2ZVteXu49qW3ZR8ri4mJvhfJrD0qM
HgkAd7XP0ZUB0NLS4oV8d3f3Sw6YQTwrM1k7Yw8oMT1D1W0m+Pt6FOjt1I2rWart6FX57Vs6dypb
wcE+tXX0KGgG4C4zyFeXFCrr1l0z4HdqONSrU6kp2nwgXhl5ZRrt71V3b9AbV3IyD+vinQIF22q0
f9MuHUpM0J3SSvWaKAgEunR88w/adeiEqus71B8KmmgIqMsM5M0trd5t9PZ0qKOzW70mJLp6zODf
G/5vsX9ja2vrGwfA8v22/PvLp3+57rs2qgLADriDwW5VVlapqrJCPcEhr4SW94e0l9ufo8P2ATei
CbPwQ4PLGzD88raG3UNgfGzUFKUZRJ5FwPJ1l6b9ZZ6/pr1OrynWvkBIHyutrR1hD15hH9D2gW0f
uPawm/b3mdk5Pfn5qVet9ghc9oiM9vwl7VEaF03FLh2ta9ZMa3dx8Y7gtfhYT58sekdxtEcK++U6
L2uvY9/ae9U7Exh9EgDuap+jrx0A5gVHsK1K+5JOqt0M6GfOpCv3bp42rv1S3/20SZ999g9df9Ss
2vw8Hd95ROu3/qCDx48oYf92ffdjjM6kHNb6n2J1cPeP+nb9eu1NTDIBcETHMs5r09ovtGb7fqWe
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
QNf8rQD4kCUAMKolAKJLAgBdkwDwQQBgJCUAoksCAF2TAPBBAGAkJQCiSwIAXZMA8EEAYCQlAKJL
AgBdkwDwQQBgJCUAoksCAF2TAPBBAGAkJQCiSwIAXZMA8EEAYCQlAKJLAgBdkwDwQQBgJCUAoksC
AF2TAPBBAGAkJQCiSwIAXZMA8EEAYCQlAKJLAgBdkwDwQQBgJCUAoksCAF2TAPBBAGAkJQCiSwIA
XZMA8EEAYCQlAKJLAgBdkwDwQQBgJCUAoksCAF2TAPBBAGAkJQCiSwIAXZMA8EEAYCQlAKJLAgBd
kwDwQQBgJCUAoksCAF2TAPBBAGAkJQCiSwIAXZMA8EEAYCQlAKJLAgBdkwDwQQBgJCUAoksCAF2T
APBBAGAkJQCiSwIAXXO1ATA1NeWtsyLl8vzCLcurJAAwqiUAoksCAF3zTQPAjoGjo6Oqrq5WTU2N
amtrI2JlZaVaW1u9EAi3XOEkADCqJQCiSwIAXXM1ATA4OKiysjJ1dXWpo6PjBdvb29XZ1a1Ab493
un35vM4udXd3G811np3vXceeNvYFQwoF+8zptl8ue2ZnZ6eampq86CAA8KORAIguCQB0zdUGQFVV
lXp7e58N6r/Y2xdQU9VDZd4p8gbggWBAATO495jLmpta1NLSrv7BIY0ODykU6tfo6JhGhgeUd/WM
UlKuqG9gwJvWf5s9PT1qa2tTXV0dAYAfjwRAdEkAoGu+9QAIDqih5Jb+7ZPPlHH5uu6XV6m+sU7n
T+zVF59/obVb9ik3/46Opaar+OF9HU08oryHlbp7+aS2bT+k7sERAgDdkACILgkAdM13EQB1D25q
w46DOpm0W3/elaCC/EvaueUb7TuYoAN7d2vn4UM6fyldf/r0M23aFaOktAS1tTbr9ImTag8NEgDo
hgRAdEkAoGu+/QDoV9OjXH3+3TrtP35Yew8f1o/ff6P9+/YoPvaI9u/cp90H9yn20H6tj4nVWTOW
Xr6corqaGp1OSVMHAYCuSABElwQAuubbDoDu7h4zgHfqwb0ClVQ1qqetQYWFRWppa1Z1WYUqK2pV
X1Olwgcl6ujsUqsZ2NvaWr0NCu1W/t1msF95mwQAfpQSANElAYCu+XsCoK+vzxucX9KEQf/AgELB
gJkmYE73K2B+BkNBz0AwqP5QyLv+sjYmXnV79jK7p4DdHZAAwI9GAiC6JADQNVcTACMjI97zxEZA
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
AABJRU5ErkJggg==</Preview>
  <Form>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
mEsAAA==</Form>
  <Code><![CDATA[#region Control Helper Functions

function Clear-DataGridView{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[System.Windows.Forms.DataGridView]$DataGridView
	)
	
	$DataGridView.DataSource = $null
	$DataGridView.Refresh()
}

function Load-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Update-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

#endregion

$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}

$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				##Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				##$tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				##same scope as the scriptblock we're in now.
				
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" -Fast -CollectionId 'MC10000A' | select name
				$global:devicename = $getdevicename.name

			
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			##Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		<#Sets the captured devicename in the text box#>
				$buttonChange.Text = 'Connect' 																		<# Change the text in the label.#>
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	<#Finds the ADOU of the Device#>
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									<#Sets the AD text box with the AD OU cuts base of OU#>
				Write-Status -Message "Device found Click Connect"
				
				#Write-Status -Message 'Software...'
				#$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				#Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware

			
				
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message 'Authenticating...'
			$global:underScoreEMP = Get-Credential -Message 'Enter Employee Underscore Credentials'
			Write-Status -Message "Testing connectivity..."
			
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet)) 								<# Test to ensure the remote client can be pinged#>
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				<#Collect Apps from the device and load them into the datagrid assigned.#>
				#$global:underscoreEMP = Get-Credential
				#Write-Status -Message 'Retrieving Software...'
				#$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $global:underscoreEMP -ComputerName $global:devicename -Verbose | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				#Write-Status -Message 'Software has been retrieved. Updating Gridview...'
				#Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware -ErrorAction Stop
				
				
				#$application = (Get-CimInstance -ClassName ccm_application -Namespace "root\ccm\clientSDK" -ComputerName $devicename | Select-Object Name)	
				#Load-DataGridView -DataGridView $datagridviewaps -Item $application
				#Write-Status -Message "Retrived Applications"
				Enter-PSSession -ComputerName $devicename -Credential $underScoreEMP
				Write-Status -Message 'PSSession Connected.'
				Start-Sleep -Seconds 1
				
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"																	<#Note: Throw command should be the last item #>
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here

}

$datagridviewaps_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$buttonSoft_Click= {
	#TODO: Place custom script here

}

$buttonSoft_MouseClick = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $underScoreEMP -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
	Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
}

$datagridviewsoft_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$buttonRunActions_Click = {
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged = {
	#TODO: Place custom script here
	
}

$rSATToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Install-Rsat -all
}

$buttonClearCache_Click = {
	#TODO: Place custom script here
	
}

$buttonDisable_Click = {
	#TODO: Place custom script here
	
}

$buttonEnable_Click = {
	#TODO: Place custom script here
	
}


<#
try
{
	Write-Status -Message "Retrieving Storage Information..."
	
	$SysInfoDiskSpace = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3" | Select-Object DeviceID, VolumeName, @{ Name = "Size (GB)"; Expression = { "{0:N1}" -f ($_.size/1gb) } }, @{ Name = "Free Space (GB)"; Expression = { "{0:N1}" -f ($_.FreeSpace/1gb) } }, @{ Name = "Free (%)"; Expression = { "{0,6:P0}" -f (($_.freespace/1gb) / ($_.size/1gb)) } }
	
	load-datagridview -DataGridView $datagridview1 -Item $SysInfoDiskSpace
	
	
	Write-Status -Message "Successfully retrieved Storage info for $ENV:COMPUTERNAME"
}
catch
{
	
	Write-Status -Message $_.Exception.Message
}

}

#>

]]></Code>
  <Bookmarks>
    <Line>284</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>