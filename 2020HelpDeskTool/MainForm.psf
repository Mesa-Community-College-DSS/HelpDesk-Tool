<File version="3.2">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAD4YSURBVHhe7b2JVxtXvrZ7/st771mnv69Pn9Od
nB6Sk6TjjO3EQzyPsQ0YzAxm8IAB4wFswMYGm8mYeZ4HIWYkISb7vXsXxsFEcZyKLSTredZ6lqSq
UlWBpPq9VbVr178BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADAO+ejj/73y6TktILTZ+MRERExyj0bn1hw6vTZghdl/pc5cza+bMIvNQ/OqmUI
ERERo9n2UZ/a+z16UeZ/GRMAClqH5lTe0KuKRkRERIxm7z0d1MPGrjcLAO3D87r3pF/3mxARETGS
fdg6rOq2EVW3vmrV0wFn/IOWYdU86X6zANAx6lNVs0kMLUOv+MAMe+A8Hzaa5y9ebyxsc9jm9Fve
b6ez83u5ksMbr1+M3/rcTvvyOSIiIr7WgrIa5RZXKK/k3ktzr1eqor7bqbc17WN69LTnzQJA90TA
vGHUvHGjuNe0mcJtFvKow8zEDjfF3Y7feD2i+w2dutfYa16PO+M33Bhng8DG81FVNXarsq5D95/0
vZx2cz6by7Cva0xIQERExNdr6+uFnCKdPJ+pEy/88cJFnUrK1t3HHarrmlBtl0ePm3vfLAD0eYOq
6/GoorpeFY2mgDd36PaDFtV1m5m0D+pW5WOzJ2+Ltll4S7eKb99TSXm1yut7Vd81rsemoD82hbz6
aZdu3atXtVnBus5xPWho1tWiW850j9o2gkFd19hG4TfzuVnZoNruSdWaaREREfH12gKffvmmzqXm
6f6jRsf49MuKS8tXZUO3Gnom1dA7pbrW/jcJAAkFA9MrejIwrXvVtSq8/UA37t4zxblON0orVFz+
UKVVdbpZ8Ug3ymtU+uCx7j7qUn3ngAkG1Sqx09ytNuOqVVnfppLb5br1sEX1PV41DUzozoNGPWjq
1q2KhyqrfqK71Y3OvMoe1pn5Nqmhb9qssAcRERF/xcbeSWUW3NaZlFy1dferratP50zxT8i8oqqm
XjX1T5naO6MGs/P+osz/MjYADM+tq3l41iSJelXU96u2uUO37j5Q4c1y3a1t1p2qWqf4lz1oUOn9
arOXX6fK2hZV1DxR0Y07Zpp25+hB6YNaXSu6qVvVbXo6MKtmGwCqGnSv9qkp9o2qMPO/WfFY5TXN
znxKHzSraXBuY4URERHxNU6b2jqti4V3lJRdoCsl5ca7SsktdF4/bBlwLgNsHZlXY8fQmwWAsYXn
ajEBoLF71KSLKTX3T6qhe1y1rX162Nyvxp5RlVU8UFlNm5r6JlXd2KYHT/udhdS29KraTPOouUc1
rYPO+x63DuiJ2bNvHZpWfceoWeEpPWxo0+POCTX1jup+fYdZjkf1XWNqHpozziAiIuJrnVPr8Jyy
rpUqLi3POewfl56v81lXlJB5STVtg2ofXVDHuE9NXcNvFgDGF+XMtG1k0SnqrcML5vmC2sd8L1xQ
XfuQmocX1e4M9xvNtPY9L6cxji4682gzj63D8yZUzL98bt/TZlas1by/Y9w8N49WO4+3ZQsi4vuu
KQIYq9r6PO+c6y+tadGdR60vLTM29nqduto5saSnXSNvFgA8PqnDvKnLFOhuU+y77eMW7fCeCb8z
zpnml7TvRQy7i4gYJnvMHiPurP2TSxqYCmrA+6q9Ez51mlrc4wmquXv0zQNAm9nr90zPa2FhXnPz
7pxfWNhRFxYXY9bFRd+O6fP5d1S/PxCzBgJLO+bSUnBHDQaXY9Ll5ZUddWVldUddXV2LWdfW1l/r
s2fPNDLlV9f4krsA4DMBYN4W8y2urq9rfW3V/Oj95gsYVMDv0/zc3M+mW7BF2HHeKQzrz57LsmSm
/2mc0Uy7ZOYTXPI7z18Z9zv0mUIYq/p9vh0z4PfvqEuBQMwaXFraMZfNb3gnXVlejklXV1Z21LXV
1R11fW0tZn1mavHrlH5nAFh8JQAsmKI/r7sFecrML1BLe5eePK5VZ8+oU9iDJhDMbQkCLwux2TOZ
847oUuYFnU9IUsfwlDO9DQ7Lq3YlpZ7mRnX2jjvP/b7FjT343+miKYSxqs8U4p3Sb4rwThowhTBW
XTKFeKe0OwM76bIphrHoiinCO+mqKcI76ZophLHquinyr/P587caAEzB9o/r6K6vdKXsobo62nTx
XJyu36zR48o7amjrczbA2wOALUj2aMH9ogwdOZKswaEuXc6/ouHJWT2puq071fUqy89R9sXrunev
QqPeOScEbC3mbtxeFGPJUIU5XG4vyOE2VGGMFUMV5nAZqiiH01DFMRYMVZTDaaiiHE5DFcZYMVTR
3+rbDwABj47885/KKL6lgow0nTmaoLgDB/WH/+//Ku7SbQWXV34WAKxLK2vqra/QpYtFyk1JUUZG
luKO71f8uUzl56fox+Nndf7Hczp08pR6x2a0FNh2msCFoQpjrBiqMIfLUEU5nIYqjLFiqMIcLkMV
5XAaqjjGgqGKcjgNVZTDaajCGCuGKvpbfesBwD8/qtwLF7Uo6UHxZV2Iy9CltHTt+36fblU/cTZC
oQJAILii3sYqFRbc0Z2ifJ04FqdbN68rLS5OqVl5upqbr5KCEh3c973utwxqNRh45f1uDFUYY8VQ
hTlchirK4XR7UYwlQxXmcBmqKIfTUMUxFgxVlMNpqKIcTkMVxlgxVNHf6lsOABvOzMw4j7OzM5qe
nnE2+iMDveodHHGKz+Z02wvy/Pyc5uZs47xZ9fT0KbC8Ku/4kAZHJszGyy/P+Ij6B8w8zPy2v9eN
24tiLLm9KIfTUEU5nIYqjLFiqMIcLkMV5XAaqjjGgqGKcjgNVZTDaajCGCuGKvpbfScBwBaYjQK/
UWxssXU2vrbx3pbpfrkg+8wGI2DmvdFA0LbcdoqWebQtme3w7e9140/Liz1DFeZwub0gh9tQhTFW
DFWYw2WoohxOQxXHWDBUUQ6noYpyOA1VGGPFUEV/q+8kALypoYpyOA1VGGPFUIU5XIYqyhgeQ4WC
cBkqFITTUKEgFgwVCsJpqFAQTkOFglgxVCjY6rNn6zsXABAREXFntPV7YGJBXRMuewIkACAiIkaf
7zAAzDmN9Xy+RfkDS875f6f73xfa9gG2V7j5ua3vQcTYdkGBpYCz3bC9f9rOwBb9fi0vB+VbXJAv
ENh47vM7h3fZAUF071sPAJvn1wNLyxpqr9PRQ0eVnJEnz/ySnq+vOeeEloLL8s3PaGTM43QbbH/Q
y7bP5pXljfltOU+PiO+nP99uLCoYXNTDW0WKT8pQXW2jMhLilJ5XqId3y3Xy2GmVld9VYlKaevq6
FX82Xv2TC2+lU7Dtbl03xPfVtx4A7CWAU1NTTut924tfQeljNVbeVHZ6pgkCF3S1pFRNjU26UXBF
RTfLdDkzWUU37ul2YZrisgo0OefT7It5IOL76+zsrFNsbffgG8OmFVya1aWk08q7elM5aekqr+vS
7FCH4uNSNeBZkHegTd9+8Y1y8jL18cdfqmvcFOy52Vfm+za067Z1u4b4PvpWA4D9IU9MTGh6evpl
ACi8U6fehnL9z//77/r7J58rMTlDx4/s0bGzcfpm11e6XHRXjwrz9F///u/atfuI2oamtDj/9n/Q
iBg5ejweTU5OOlekeL1e57XdbizMz2mwv1UpSXH69Iv9qmkd0sJIp+Lj0zQ85ZOnt1UXzpzV3n99
pf3HktU9Yt7zlgOAXS8rRwLwffetB4DNH7U9BTDYVqvDB48oK/+anjy6p4SEBLUNjuv21RyVVtWp
/GaJMhLP6cqVmyrMSVFW0R1Nzfucc31bD8ch4vul3cO2hX8zANjXts3Q0uKsbhRl69SFDNU8qlP6
uXNKy7imqrt3dOLgaV2/Xqr7VdVqb23R7dIKDYxNv/VTAHY7ZtfJPt+6sUR833wnAWDzh2N/0Hb8
gi+g4HLw5TXoSyYcLPn9TiMf29jH59wrPLBxn3p+dIjvvfZU4dYAYF872w2jf9FuNxad9kJ+szMw
b17bdkL2tuG2EaDTp4DZdiwF/M6wUPP/PW6GEwIAvu++0wBg5UeEiNv9xQBgx5tHO9y+dnYKXhwR
fDnsHbm5bgQAjBXfeQBARNzuawOA0Z6Lt8PD5dZGfwQAjBVjLgD81CWt7Q43lvQ5G1v7GdlHexg1
VFex78pQnwXGrr8UAOz3dGhoSLW1tWppadHTp0/V2taurq4utbe1Oa+fNjereYt2WEtLq1pbWzfG
v7C5ucUM25jH1um3++TJE2eazSMMBACMFWMqANhDiQODQ+rq7lVPb39M2dnVo7HxcacYj46OOhvX
9vb2d26b2WjbjTcbU9zq6wJAf3+/890ZGxtz7G5vVkV5uRpaOpyrjEZHRs13eEzj5vs8OjqiEfN8
sL974zs+Nu4MH5/waGJ0WG2dXeZ7P6FxM5+f3jNqxpvHEfNeow0c9vdgl28lAGCsGLYAsLDo0+rq
mlZsY55t4zZc1MrqirO3Glgye4xmXlvH23kHbGNBv8883/q+32Z7Z7eWloIbjYhiyOnpWSf42IZV
tih3d3c7l17ZDaJncmNjNzc7oynvpNnI2g2o2WiacROeSXnN+AmzQd0YtzHcOzVtPmuPJqe88thh
Rjtuu3YZDQ0NPzvEi7Ht6wLAwMCA8x0dMYXeOzOu/FNxOp+YrBOHz6qld1gjQ4MaHOhz9tr7BoY1
ad5fUZCu43FZmpqedop5XU2VcvMKVNfWpf6eTjW3d2l4sFdNza0aHjLBwEzTb3YGhk3xt8sjAGAs
GpYA4A8E1N/2WKdPntTZC9nyLixLeqYlU9CfPXuulZVlLUwP60ZBsYaGR9VU3arg2orZWw06dzSy
ty20tDU3qnlwUs/NuBV7tyPzvrW11Reh4NXAEEo7jd0bjkXsXcHs324fOzs7nT0rezTA9tcwPTGs
u3fv6FFdkwZGx7XoX3KCmt/eitk3a0LAuOZmps24CS2vrJgg5tNwf6/ZOM/JMzymuUW/mX7Zmd9P
+pzvgX1uD80613izQcUXvnEAmB3XxWOndOTwMaWcS1HKjTuqul+so0f36rOvvtLlW7c16x3V5Zx0
paZmKjsnUyfi43Xh/Ant+mqPki9dVnJKnH5MOqfvDhzSnsMHlZhwTH/72ye619BpwusoAQBj1rAE
APt6yT+ry9lZKn/crs6mh8rIyldHd4cyks/r7qMWBRc9OvDXr3XlWpkKEq+qyR6a62nUzZslyrqY
o+vXbys9NV7/+PaQ2nt6VXarUCV37qn4erEetfSaovTr55ljOQDYoydbA4A9DGo3vsvrK6o3/8PT
J1JV96RJLV29JoQN6GlbpxME7l/PUPa1AvM5+/SksUYXc69pcW1NuYcPKPNqqcovlqq7f1jNLa2a
nJg2e2Meecx3wDNuvgeLGy237caVAIBbfdMAMDk9oryTKSotLdfFtBSdSErV2eN79PFXu5Wen6Wr
xXnqbqrV7i+/0pH93+m/PvyzMgtLdL0wRycOnNS3Rw/qXEqS0tJP6792n1JRcYZOHP9Guz76VLlX
78k77SEAYMwalgBgXV1dUtn1IjV1juleaY7++sH/0TcH9yk3P10X83O1MDujwvh8JZ06qxO7Tyut
skr3rhzVrtMJOnvovNKTEvXN3u+VkndNe3/4h/7jz3/T7r3f6aO9Z9QzMbdxvfC2ZW6XABAqAKyq
4Xqh9nx/Uo+a6nWlsEBHzpzTwZNHlZqdrFMnDijrWommxgYUl5ygwycSNLUS1P3MK0o8k6SsE9lK
y0rV+bREnUlK0fnz53QmPkFVj02oW14iAGBI3ywA2PP7Q2p61OAc6m95UqvKspu6mJmt8ofVanjS
oJa2p2qzjfjMTsDkxJAeVpYp/eJF3aup0c0rRXrwpFX3795QfuF11TY+VVNzo6rvlyo3K0eNLd0a
Gx0hAGDMGrYAEAz6VV1Zoc7+Ud0puqgf9u9WalaKDvzrn7qQfVX+hRndL3ms2oobio+7qOyMJJP0
Dyr7/gM9vFWnJ7WPlJB4RvuPntClwkuKP3tOaXm5Sisu04xv6RfaFbwqAeDnASC4FlRt0S2VlTZp
3T+uxJREHc0oVHnFFR0/vU8XEk+bjWeJJgY6dDIl1XwuBfIGFlWefVMP79zUv/7ylc5lpJq9sRyd
T72gUycPad+hI2od8DqnZggAGMrXBYCtjQBHhkc0MTnxouGex0y70U+/12xnbBuT8fEJp3HrxISZ
dmRMk2a8bcsy6fFoambahIIJZ9iM+f5NeiY0YaZ3pjHbgonxMQ2b+dMIEGPVsAUAq/MDMz94u7dv
G5H1t9fr5JEjqm3r3+gJ0Iy35539S35NT5of+8ysfHZ6+76FRfnMsmxrXv/SsmanJzU5NeN0Axpq
WaG069fbN/CiJMYWKyurIQOA1TNiNq5jXvkXZ9U/0K8es7c1Mmb2voZ6dff2TXX0j2h+dkr9w0Nq
bXiq0clpjQ+OODdt6u0ZdFpgl1ZWORtNO83QYJ+mZ81nZv7nBAAM5esCwNbLAENdtve25TJAjFXD
GgBsD1/20Y53io/5sdvbAAf8fue9m9162vG24NtugW0R2Trc+ZE6z1+MN76c/69o59PW3rlxiZDH
G1MODA6ru6dPyy8CgN17Wlpacja4geBGV8z2Huv2KgHbADC4ZAyu6PlzEx5eNAi07121jS4DG904
274EbAPO5WUz3bN1Z37LQft62bmPu523HUYjQNzuLwUAO85uC+wwuy0Jl1uXTwDAWDG8AWCHtes1
Oel1DvvZBkax5LBxenrGKdr28KrduxocHHQOt75L7fnVurq6VzawiK8LAPbRXj1iA2Q4tMuy67G5
br81ADg7M2GS3xC+TWMqAFhtZ0D2tEKoH9f77E+nUmwImlRvb6/6+vreuXY5w8PDbLjwFV8XAOx2
xOnMJ0zatga26+HN5f+WAGDXdaMtQuh5v23tuvFbwrdlDAaAjW5xY1bz99s9HtsWILi09O51Ti/Y
Uw0/dUmMsa3dPvxSALDj7ZEp2wbAnjqy5+jtaTsbJJ3eJdvafnYOf6strW3OtJ0d7T8b12re2962
Mc+tNjU1Odp1sevwpgHATm+L8i+3V2hRh3O07adhdrpNX53W2qL2jg61hhhn/xf2SJr92+zvN9T6
IP5WYyoA2PWyPdoNDAxpcGgYEcPp4LCGhkacArtZZEMFAHvaqMMUQrtnbtuvdLXWqaCgQE0tbWrr
7NbEpHejRb+9KsBsb2wRtq9tl7+jA10qvlagh3VNTkNj76RHoy/28Hu7u9TVP6zJCdvDpcd5z+/p
Ctiuu11HW5ztOjiXLW46OqqxkSG1dnRqzDOpCTPd2Kj5e5wrGbzy2PU367DZi6b9O0aG+9VU36T+
wRGnke7W+dnl2C61CQD4Ng1bALDj/EtBp9W+zzw+e/ZMwcBG47/5hUWtrj/T2uqK86PyB8xewovH
7V0C/17t3oTXO62p6RlEDKdTM+rp6Xfa4Njf4usCgO0HYHRsXIPdLToXf0pZOTm6lJ2k45mFJkj0
6UmzCQMtTXpU/9TMs0OPahs0Pjaii5nnlZCcrqLiItU3PFF9U5tGhvrN+Dpdu5Kt/QkZGhqdUHdH
iwkUHabQuu8HYDMA2PfaIm2DxEvN3+gd6tDeI4dVXFmngcFBDY0Mq6qsWD+ePqPcgtsmODSprqlV
3e1PVWP+jo6mKn35j8/1qG1A46M2LP00Pzt/G4oIAPg2DVsAsK3I+zqa1Ds8qaH2Rl2+lK+6zgHn
8PDi7IRKC/J1/e5953rdgZ5heT3j6jePi/43v8zv17TrF6uXAQJEAjMzc05xtL/HXwsAE5PTelxx
TefySpz39jXX6NDZs/r267/rw893KyklTh98+J/avXevjiQXyDPQrOOJKZpZeq4V/7wyEw7pj3/+
k07Gn1ZiVraSz5/Wx19+o6Skw/ro4//Rh1/tV/vAmHNvgXcRAKZGurRnzx4dPHZUX8Ulq/JhqY4f
+Kc+//I7fb9/v85diFdc0o/69Nu92n1gj2rbOnQzN1M1TzsJABgWwxQAFrQc9Kk4K1HXq+pUnnnJ
BIAiZeSkamzOr9qKAl0uuKFrl7J1ObdQty5Vqbe5QdeyK7T0bGXbvNxr1y9WOwICiATs0bc3DQD2
zn4DXU911hTwvMuXdTUvUwdOn9K3X/1T+0/9qAMnjuirT/9bf//yX7r+uF3+6TFlpscrOTNHt0ou
69TpI/rnR/+pL/Z+p5xrhUpMOqe0q0XKPPup/v6/u7T3bJKae0xxfVcBYKhD+w8f0akLcfr6yDEd
O7RHx44cVMLZdJ08eFCnkxKUcP6oPj2WqmsFSSqvqdH1rDRVN3URADAshiUALPqDmhx4ahK4/XGm
KTexRLPzz1VTckHNvUO6WXRRQwFpoaddFw4n6+6tRo33tqkwt1JL68uvzOv3SAAA2Fl+SwCwRW9s
3KO2Jw+Vm5uruoYnauvqUePjh7p976GaamtUVFikmrpGdfT0mWI8ocHeVl3Oy1NVbYMaq6tUdP2m
2lpbVFBUqEeNTWppa1V3d7uqqypVeq9Gw6Pubwb02gBgHDNF/P6dGyq4Ve4c5i8qKFR9Q72q7lSq
+kGtKsrLVHbvgVrbO9Xa+lTdprh3mHXt6RvQsO1Qa8u8CAD4LgxLAAiurKi+rFBnzqUqPf2cDnz+
g9JSUnQ+PUtTvmW11NzS+fgkpaQk6kFNrcoKMnTmfJLKaju0srz0yrx+jwQAgJ3lTQKA7T/CaQNg
irNTSE0IsOPHx8c0PjYqe4vqqUmP06GXHW4b0tk+/Z1COTqmaTNsYnzjVtb2lKJtoGcbAdphtifR
0dFxs53yOvOwtwO2Vx3YlvZuAoBdRxsA7KO93HWrQ0P2VsVTmvZOOkczbGdYzi2yzWuPvZW2WQfb
SNGukx0/aoq8bbA4MvLqfKx2/jYA9PT0EADwrRmWALCwOK/xkTEFlte1tuxTb0ezHj58aBY8bb7M
PvnN+KZHD1T3tF3Ly0GN9LebVN+keZ//jfr4f1Pt+tEGAGDnmJ6e/dUAYPd27SVvtijbLnrftbYr
YFvE7br81gDg8XhUX1//ztfVzt/+T+zRCgIAvi3DEgCstttfp0vfhUUFloJOd7H2igD7HttGIGhe
2+vG7bT2HvW229m3Wfw3be/oMoHEZ9bHj4jh1PzubJfUrwsAm79TW4TtsHC5udzNZb9JANg0XOtq
lxNq+YhuDVsAiATteg0Pj6qnt885EoCI4bRfvb39TpfUm0U2VACwj3YvN5zaIw+b24nfGgDsdOEy
1PIR3RpTAcBKb3SIO6c95We3D7bghwoAm+M2G79tPxf+LrTLsefmN7dbvzUAIEarMRcAEHHn/aUA
YEOCPc9tu9e1DQFtL3tbtefqO7q6NTg4oP6+HjOs5WfTbDXUPLZrz7E3NjY662LXgQCAsSIBABHD
7q8FANvi3V5iZxsEbnXc41FbwyNdvHhRhbfKNeaZclr62z34KfNoW/vbLn49nkmn9b29AsB2v2tb
4NsrCLbPz2qPALi5DBAx2o25AGDXzW50EHFntL/DXwsAm/0AbJ4K2NQ7N6mi+CTFJaTp9MHTqm5o
VdX9+2ppb1VZaalK795RnRnWVF+jew/vK+X8ed2tadS9+5Xq7B3QyItD/lt12w8AYrQbUwHArpfX
O2U2LKMaHbXXAyNiOLU37LHbCfcBwKvi84nas3u/4uOzdO7sPv3xzx9o1/4D+nb3Ph38Zr+OH/9O
R+PjlZByWru+3ad/fb9Lf/jTn3ShoMw5KrB9ngQAjFXDFgDmjMHlFa0E7aV+C1peWVVwKeA8X3nx
3GmRaxvp+QMK+H3O/PyBJa2ursq3uODMw05vp7PjQ10muLCwaObxU4veV8ctODcDsjcZsZ2LIGJ4
7ezsce6UZ3+PbgLA5My4bqRd0qNHLbpdmKcDe3dr9/7D2p8Qr+zLJarIuans3NPad+KU4tLidOJE
vPZ+87W++H6fLt95qMmJiZ/NkwCAsWrYAoDfv6jWumpVPH5iivmcqitL9fhJuynk83pontc9bdPQ
4IDGJmflGRlQ39CYAoGAhnubdfv2bQ2NTzl9BwTMeweHBs34Yc3M+7RsAoVdnr2pkN9M71+YU//Q
iHwmOCwFNi7vsf0L2D4IZmfpCAhgJ7E3Axr8DV0Bby/WwyPD6unsVl//kPp7O9XV2a579+6rpaNL
Xd09G+PM+5vqHzvdAXe3tunpk2ZV3r/PKQDEbYYlAPiDyxportbxfSdVVFmugqJ8pV3MVkXFHZXc
uKrU7Gzdr65Uyv5DSr58Sxmn9ur8pXvyzwzrQlqCrl7NV2Nrpwb6+9TX1aKU9BQdTc1T38SMenv7
zEZjUe3t7Xra+Ei5uQVqGxyXZ3RQrV19mvaOOfcRn56z5x7pChhgJ3nTroBtQbaX6NluerdrQ8CQ
2QmwtxW2p/NsA0Dbja4t7nacfZ89yme72LVHG2z3unaazW5/t2uXZ68EIABgrBmWALBgftQzE8Mq
zMtUbn6WDiQkaWbNbg5WdCEjVRNLzrZB99Nz9MN3R3Tkhx9091G7OpoqlF1W64zz9DboXGKcElPP
6Whiqs7nXNbpuCP68O8f63jCOaXm5utKfor27z9qQsRlZeWkK/Viqv518Kj2HNqnKrMXsLy0RAAA
2EF+LQDY17bf+4aGBicE2C5w37VNTU3ODoRdNgEAY8mwBACf36+R/k6Vlt1S0oUfdTrxvPIKrupB
VYUKiy8pM/+SHtTc1a2sG8pJzlJ6UobuVzdqbrJfSWmJul16S9evpulCdpaSUk5p39kLSriYqwMH
92jf0dM6eOqwsgqKVFlRosQT8TpyPkEpFzN0MT9ZnxxJ0u2yS7rz4J7TBoEAALBz/FoAsMPtY7iL
79blEQAwVgzPEYCFRc1Ne1ReWqKK2mYt+edUcbtYD+qeyrc4q4rSYj2se6LRIXsnr0XNeiecu3rZ
8/r9HfUqLi7WqGdadY+qVPu0TfZWmT1DoxobHtTdew+ca4Mryu+otbtXT2tq1TU8od72JlVUP9aQ
mc/Q8IDGJsad9SIAAOwcU1MzIQOALbqbe+A7rd2OEQAwFgxLAHA0w1ZW17S6HHSer66uOw34bKv+
1bWN5z6/z2wE7GFA223oxo2C/IGg1tbWnI3DstmDt9NtXgXg9we0Zq8Q8PmcKwUCZnhwZdkEDJ9z
w6FV22jQTufzm6CxMb+Ozm7nxkPOvBAxrI6MjGtwaNjZJmwNAPauerYTn0jQbsMIABgLhi8ARIA2
XPQPDKqru1c9PX2IGEa7jZ1dPfKaIrv1MLvdbtie+iJJu06htiGI75MxFQCsGzcDMpo9D0QMs75X
bwa0ua2wj5Hk9u0G4vtozAUARNx5tweATW1nX8srK1pdW3X68Xj9nvjGacXl5WDITsEQ8fUSABAx
7IY+ArBoiv68SvIzdeZUvJ50Duq55LQbCgSXnfY+KyYcPFtfd9r7+OcndSUjWel5hZpfWnOGr62u
KBBY0vramhMg1p8908qyee/auoIB27vomx1t2L6+iO+j7yQAREprXkSMTLe3AbCBYGZ2ToG5EV04
n676uhplJmc5l/Zer6xVR9MDXbp+Q1WVlUq/mKMez6wC0/06sv+wSiurdL34pkpvFeryjTL1dLfo
0tXLamrv1KXsDN2rrlFRYZ4etw863YQ7y/oV7fpt3VAivo++1QBgdW7Lua1VLSLiVm2rfxsAtl4F
4J2akW9mSFlZBZrzzen8v3bpD//xf/T1v77T3/7rv/Xprk/12a7jyszOUlbRPa0GxnVozwFlZ2fr
1OHj2vXXP+uTL7/RJx98qL/87SNlXi5SVlqSmeY7/fef/6Iz6UXyB4OaMsuzy3yddju2dbuG+D76
1gOATc+hWtUiIm7V7vnbIwC24G70A+DXcmBGqWdP6fjhUyorK1Nm3ClT7G/pSnqSkk2hP3bwoL4/
eEJVTb1amh3WjdsPNTM1orI793UrL0XnMvJ042qeTscl6tbtIn2/Z6+Kr17VyRPHdbe+w+lbZOuR
iF/SHsl8ffsDxOj3rQeAUD8mRMTtbm4vbACwOw6bw2emPBoaHtPS8qrmZrzyTM3K71vQ1NSEah7c
V3vviCnk9k6iG++3j7bvkMWFOY1NeJxxExPjmjXDJ0ZHNT1rT01OaMae/zfDNrdVr5MAgLHgWw8A
LzU/nkWf32nNuxKila69HMhel7/52mkAZH649kcXXFnRmnlfwL/Rec/W91nn5jfu/rcwPyf/0kZH
QcGlX2sxjDuh/axWnNs5b7Tw3jo8GAw6HTVtnd5qvxv2XK29g+P2cfh+uT0AOMMWFzfaEZnn9tFu
J+w4+3zJfGf8L78zrwYKuw2xlxpuTmsfne3Mltdbl/06CQAYC76TAOD8AP0BTY8OKPN8grILbsq3
/FzPTFG3vYE9f/5Ms9NezS34tb6+prVn0tKcRzWPnpgfeEB3i/J1PiFNzT0ep/vQ1ZVlra2va2Ul
6OwVaH1JdY9qNbUQUNvjSiUknFdlbbcz7ZqZmdNqOLC80SrYBhDnsqK1jfmYR9tCOBhccua5GRw2
NiDo1u2fvzPMhro5r4oKCjUwHTCfzjOtBJe1av7vWg3o0YOH6h2ZNJ//c/PZbLT0fr6+oimz8R0b
m9CC33yG5rOyt4F+9sx8VuYzWzePG8Hwp+VgdLs9AGzVnhqwv893aagGfwQAjAXfegCwP6bp6Rmz
sfbpRn62iu/Wqq+zR48qi1VQWqpHDyt19co1HTtwUElZV3Xn9m0VFuWp6GaB0rKKTaH2KfnMjzp2
7LQuXy1Vxe3runv/sQrzc1R6r1HtTVW6dqNQCYlZ8iwuqfRSpo6fOK2Tx+NVcvuOrhde1I0Hj9XX
Ua303DwzrEx3yspVUnhN5fceq6ioQLkFxXpc16jrV66qvnnA7FEsOhsgdO/Wjah9bc/xLvgCmhru
0IHv9qrk7kMVXspTee1jlRYXmtc3FH/mrApLH6jixhXdKKtRZ2ONCi7na9/3+5RbXKHaB7d15UaJ
amsfKiszX3V1T3Q176q6+jxmz26jMxmMbu33JVQAsM/t3QDtnfq2373v6dNmtbS2qq2tTS3m9S/d
NbClZfPx9XcVfPLkiVrN/OxRgs3lEwAwFnzrAcC2nvV6p7Tkn9HlzAw1Dc5p2dujlMRzSks/q48+
/0FXcjP1vx9/rfj4JB3a94OyLqbpxPH9OpFUZPbaA0o4elAXLt1SS32N9n36if6f//hAiak5Sjtz
XB/88T/1yWef6Ot9cZoNrqosL0VHz6br1o1rOvjdPqVlJOtC8lntP3ZKxQXZ+uv/7NKV/AId/OJz
/fv//bsOHDymo2bcj6fP6ouP/6HEi3cVMHufXvODtxsidKdtxW032nZDvvEd8DqHax+WXdJX33yt
v374kdKyi3Xy6Pc6euqiMjIT9M9du/XFrq+VnnVFDfdrdDHuR/3xD3/U59+fUPL5OB08elK5eUn6
68f/Um5Onk4eOKRP//6RCu40aWnZ72ykt68HRo/287PaqwK2BwCrvUe/vV//0NDQKw6PjKivu0MN
DY3m+ah6enqc+wsMD284YsZvTGtfDznz2By3fV7WgYEBJwhsXT4BAGPBtxoA7A/G/nBskraHc3uf
PtbpI6eVmZqrvOwEnUtKVE7BHXV2NCv+9CmzF5+pmtpHykk9ZcYl62pJlZaX53XjeqkWn0ldDyp0
4Mu9+mrfMdU2d6jqzg0lnTmtC5lZysor1tSCX9Xld9Q1uqDxnqe6U35PhbnnlJh9SQU5Kfrsn59o
75lMPbpboePf7te3B0wouHlHZaWlul5YrHMHDyi94K6WVlbM3xH68CS+mfZzt4+bLbxto6ygb0a3
rhfJM7uguL2f6M8ff6eMrGTt+fZ7JWVlKflCqlLTspWRlKC8i1eVevSs9h44qtNn45SemascExLi
zLj0vBK1tbep4GKeju/dq+L7T7SysvyzdcDo0m4zbBD4pQBgi/LPA8CwJr3Dyjh8QgcP/qCMKwWq
a2rR4PCoGTdoph/QyKhHDQ/vKi7/pjwD7Tqbka8Rj9cEgBGNjY6YsLB1fhsBwB4l2Lp8AgDGgm89
ANg9QXue/dkzU8ENQd+C2cNek56tbpy/Nzx79lx6vu6c27WsBANaXbd9ftlxz/T8+fOX77fne1fX
N4Y5PF/TYmDJebo57XPzuDn9mtmbt1MOPX2ko0kZGvOvO8M352Nm8HJey2YP1VmVF+9Hd9rPcfMI
wGYAsP/j9fV1Z7xlarRPjS29Wl9eUH29KeAbgx2Wg37nO2LP/9tGnc/WV7VqG4aYzzqwtPEdceZj
5mkbDtpPb+vyMfq0349AIPDaIwC/FADGx3qUcypHg2MTupK8T/H5xbpw5pC+O3ROj6srteuTj3Xi
x2P68OMvFJ94RofNjsaFC6f010++VE1rjybGNo8QEAAwtn3rAcD+kKuqqnT16lXHa9eu6VpBgQqM
167Zx43hm6+d5y+n+WncK+/fnO7lfK69nGbrtAXO641x1wqLdOvmTRUXXntlPpvzcKbZMh90b319
vfPZ2w2o/fxtGCgpKXHGOf/fK1dUWFSskuvFzmddUnL95XfC0X42znP7GdnPZONzsW7/rJ3XW5aN
0as9726/N781AEx4+pT6Q7xu3y1T8sm9+ub4OZ2JP6IvPturC6mp+vyzD/WPj/6iYxcu6tSZvfr0
hyP65JMP9NnX3+tGzVN5J8ZemScBAGPVtx4ArJ999pn27NmjgwcP4nvsoUOH9OWXX2r//v2vdLBi
N+x/+tOfdOzYsZDvw9j2yJEj+uijjxQXF6fV1dXfGACGTAAY1a3cLJ08eVIVNbWqqqlW6fUrSr6Q
rarKCp1PiNOVgss6ffaMrlwvUaWZprLshs5n5qmtb1CjI6+2BSAAYKz6To4A/PDDD7p06ZIKCwvx
Pba4uFipZo/r1KlT8vv9LwOA3XDv3r1bN2/eDPk+jG3t0aGzZ88qOTnZOX30ugBgG/Rt157L905P
a9Z28OPxOE5N2dfT8rwo3PZKpLm5WU2beXsnbTfDU5qbndH42GiI+Q0TADAmfScBYN++fU7/3DYE
4PvrlStXlJiY6OyJbQ0AdmP6zTffOBv7UO/D2NaeyrHfmdcFAPu8oaHBuRLAfp/epfZSQ3spIJcB
YqxJAEDXEgDQjW8aAGwRtnvoo6Oj71S7DLusrcsnAGAsSABA1xIA0I1vEgCsTpfQ5ntlH9+ldhlb
9/6tBACMBQkA6FoCALrxTQOA7V3SjguH27sDJgBgLEgAQNcSANCNb3oKwJ6bt9p2ANttbmlVZ2en
Ojva1dz86jj7/WttadbT5mbz2PLKuFDa8//2kTYAGGsSANC1BAB045seAbBXAWx27btVe95+qL9H
D6ruq/LhYw2Njmt8fMwMH3O6oR4c6NfAkJluZEg9vX0aGzPjx8bMe38+L6u9FNB+Z7cunwCAsSAB
AF1LAEA3/pYAELIfgOlJ3b9ySYd/+FGXb5aqs6dbHZ3d6jWPvf1DunPjin7MKVF30wOdyrxqQsG4
unr7TUB4tQfATekHAGNVAgC6lgCAbvy9AcAz41Vlbo72fn9K5eW3dPjIYe07fszMO0N//58PdeDo
AX30+W6dPHtcx5Izdfjgl/rLJ9+osXtI4yFCAAEAY1UCALqWAIBufBsBoPxitg4fSFB56TXtO5uu
woLz2nt4j7787AP93d4L4EKGDhz7Xl8fOqp/fvo3fX3guB4298iz7T4AVgIAxqoEAHQtAQDd+HsD
wOj4uDoaHyn1QooycvJ0p7refOfqdO/ubWVlZqi07LYSzbzv3KtSfVOrHpTfVm7RLfUNjWhk+NV5
WQkAGKsSANC1BAB04+9tBDhiho1NeDQ3P6dZ876pSY/Gxz3yeqfMsHlnfvNmWzTl9cozMSHv1LTm
ZqY1un0+L7QhgACAsSgBAF1LAEA3vkkAsM/t5Xn2MkAbBN6lm8vhMkCMNQkA6FoCALrxTQPA9PS0
c2vpcGiXtXX5BACMBQkA6FoCALrxlwKA3QPf/A45GyfzOpzaZW4unwCAsSABAF1LAEA3bg8AXq/X
0XbHa7cfkaDtUIgAgO+7BAB0LQEA3bg1AASDQWe7Yfe4N4NAJOg0JNyyoUR8HyUAoGsJAOjG7QFg
83sTaW7dUCK+jxIA0LUEAHRjqACwdaOEiOGRAICuJQCgGwkAiJEhAQBdSwBANxIAECNDAgC6lgCA
biQAIEaGBAB0LQEA3UgAQIwMCQDoWgIAupEAgBgZEgDQtQQAdCMBADEyJACgawkA6EYCAGJkSABA
1xIA0I0EAMTIkACAriUAoBsJAIiRIQEAXUsAQDcSABAjQwIAupYAgG4kACBGhgQAdC0BAN1IAECM
DAkA6FoCALqRAIAYGRIA0LUEAHQjAQAxMiQAoGsJAOhGAgBiZEgAQNcSANCNBADEyJAAgK4lAKAb
CQCIkSEBAF1LAEA3EgAQI0MCALqWAIBuJAAgRoYEAHQtAQDdSABAjAwJAOhaAgC6kQCAGBkSANC1
BAB0IwEAMTIkAKBrCQDoRgIAYmRIAEDXEgDQjQQAxMiQAICuJQCgGwkAiJEhAQBdSwBANxIAECND
AgC6lgCAbiQAIEaGBAB0LQEA3UgAQIwMCQDoWgIAupEAgBgZEgDQtQQAdCMBADEyJACgawkA6EYC
AGJkSABA1xIA0I0EAMTIkACAriUAoBsJAIiRIQEAXUsAQDcSABAjQwIAupYAgG4kACBGhgQAdC0B
AN1IAECMDAkA6FoCALqRAIAYGRIA0LUEAHQjAQAxMiQAoGsJAOhGAgBiZEgAQNcSANCNBADEyJAA
gK4lAKAbCQCIkSEBAF1LAEA3EgAQI0MCALqWAIBuJAAgRoYEAHQtAQDdSABAjAwJAOhaAgC6kQCA
GBkSANC1BAB0IwEAMTIkAKBrCQDoRgIAYmRIAEDXEgDQjQQAxMiQAICuJQCgGwkAiJEhAQBdSwBA
NxIAECNDAgC6lgCAbiQAIEaGBAB0LQEA3UgAQIwMCQDoWgIAupEAgBgZEgDQtQQAdCMBADEyJACg
awkA6EYCAGJkSABA1xIA0I0EAMTIkACAriUAoBsJAIiRIQEAXUsAQDcSABAjQwIAupYAgG4kACBG
hgQAdC0BAN1IAECMDAkA6FoCALqRAIAYGRIA0LUEAHQjAQAxMiQAoGsJAOhGAgBiZEgAQNcSANCN
BADEyJAAgK4lAKAbCQCIkSEBAF1LAEA3EgAQI0MCALqWAIBuJAAgRoYEAHQtAQDdSABAjAwJAOha
AgC6kQCAGBkSANC1BAB0IwEAMTIkAKBrCQDoRgIAYmRIAEDXEgDQjQQAxMiQAICuJQCgGwkAiJEh
AQBdSwBANxIAECNDAgC6lgCAbiQAIEaGBAB0LQEA3UgAQIwMCQDoWgIAupEAgBgZEgDQtQQAdCMB
ADEyJACgawkA6EYCAGJkSABA1xIA0I0EAMTIkACAriUAoBsJAIiRIQEAXUsAQDcSABAjQwIAupYA
gG4kACBGhgQAdO0vBYDm5mbt2rXLCQD5+fmIr2gDwLFjx3T+/HktLy8TABB3SAIAujZUALDfg97e
Xn366af67rvv9O233yK+4u7du/XJJ58436FAIEAAQNwhCQDo2lABYHZ2Vl6v13FsbEzj4+OIr2i/
Fx6PR1NTU44EAMSdkQCArt0eADa/B3aDvri4iPha7feE4o+4cxIA0LW/FAAQETHyJQCgawkAiIjR
KwEAXUsAQESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkav
BAB0LQEAETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0S
ANC1BABExOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoA
QNcSABARo1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEA
XUsAQESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkavBAB0
LQEAETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1
BABExOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoAQNcS
ABARo1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEAXUsA
QESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkavBAB0LQEA
ETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1BABE
xOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEAXUsAQESMXgkA6FoCACJi9EoAQNcSABAR
o1cCALqWAICIGL0SANC1BABExOiVAICuJQAgIkavBAB0LQEAETF6JQCgawkAiIjRKwEAXUsAQESM
XgkA6FoCACJi9EoAQNcSABARo1cCALqWAICIGL0SANC1BABExOj1rQeA2dlZffPNN0pNTXVCAL6/
5uTk6MyZMzp06JACgcArXyxERIxs30kAOHXqlHbv3q3vv/8e32P37NnjhL20tDT5fL5XvliIiBjZ
vtUAYPV6vc6jDQL2dAC+39rP2Qa/zc8dERGjw98dAHyLC6/McGFhQYuLixhj2s996/cAEREjW1u/
XQeAca/Z+5sNvWeIiIiIkaut3/3j8789ALSPLGp43KtJz4Q8Hg8iIiJGkbZ+947Oqtuz7OIUwMyC
lpeXtLjo01LQPC4saGFxUcEXz+0hhkBwWc+fP9eyGWYPE//kovMeewjCeW3msf7suaTnCgbsJWU/
TevzB7Rkhi1sGYaIiIju/R2nABblnZlRT1ePpmem1dnZI19wTSuBeXV09GhpdV3P1lbV11qvvNwc
1bV0a3l1TavLQflNQV9fXVJXZ5dm5/3OJWSzkyMqKcg30+appW9cz589c4LF2tozTY0Pq7tviJbm
iIiIb0n3jQBHTDGe8yj9Qrqamp8oNTVXnb2detL0WCnJ2aq4V6X2gX7dunJRF/OvKCslXc0dHWps
adXw0KAaHz1QRnqemrr6ND45rYB/QbdyUnT8aIoGhrt0r7pa03OTqq99qLLSYl25XqXVtZWQfwQi
IiK+ufYIgN+36D4A+HyzSjh6QKfP/qhvv/pWn/3jA/3j86/09Zd7dPJ0slJzM5WWeVnDc0E1XM/V
B3/4D/3tsy907Mhhfb3rG335j8+1+/g5eeYDztGBvsbHum0K/d3buYpPTtDBo0eVnZ2k3Xv2qvBO
g1ZXl0P+IYiIiPhm2qPp09PTGhsd0eDkorsAMDvr0eX8a5qY9irnfJx+2P2dEtIydGjvfu374Zgy
LxcoNzNdZ8/F61JuthKOHdax+GRdy8vT3i8/1/d7TigxPlX1HUNm735NXWZv/2bxfVWW5erM+QQl
JCYoLTVeh44cV0lFo1YIAIiIiK61l23b4t/X16f+vl4NeX1u2gAsaHJ6Tt7JSaczmOnpWY0M9qij
f0S97Q3KzMrToGdKs95RPX70SCPeOflmJ/S0vVOe8XF1tnfIOzOv6alJDY+NOys1Oz0lr3dW89Oj
ampuk9+/oNaWJo1OeDU1Ne0csgj1ByEiIuLrtTV0amrKKf4tLS0aHOj/PQFgXkv+RafFvz2XsBQI
KLjkN899CgaDZpw9TeDTysqyAr4F5/nyUsCZ1l4VEDCPdlr7emF+zoQAOx/bkZCZ7sUVAvaKgoCd
j71awPwBttECIiIi/jZtrbWH/e2e/+DAgCbGRjQ06SIAtI8sqHd84xKCkHpCDENERMQdct4552/3
+h1t8R9dULfnDQNAXHxSwcyy1GPe0G1Sg00OiIiIGH3aWj4w80ztA5O/HgAOHj5eOjy54KQFRERE
jG47TPGvb+769QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAL+Rf/u3/x9UQPyJftQpSAAAAABJRU5ErkJggg==</Preview>
  <Form>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
dvYpSQAA</Form>
  <Code><![CDATA[#region Control Helper Functions

function Clear-DataGridView{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[System.Windows.Forms.DataGridView]$DataGridView
	)
	
	$DataGridView.DataSource = $null
	$DataGridView.Refresh()
}

function Load-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Update-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

#endregion

$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}

$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				##Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				##$tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				##same scope as the scriptblock we're in now.
				
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" -Fast -CollectionId 'MC10000A' | select name
				$global:devicename = $getdevicename.name

			
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			##Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		<#Sets the captured devicename in the text box#>
				$buttonChange.Text = 'Connect' 																		<# Change the text in the label.#>
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	<#Finds the ADOU of the Device#>
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									<#Sets the AD text box with the AD OU cuts base of OU#>
				Write-Status -Message "Device found Click Connect"										
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message 'Authenticating...'
			$global:underScoreEMP = Get-Credential -Message 'Enter Employee Underscore Credentials'
			Write-Status -Message "Testing connectivity..."
			
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet)) 								<# Test to ensure the remote client can be pinged#>
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				<#Collect Apps from the device and load them into the datagrid assigned.#>								
				#$application = (Get-CimInstance -ClassName ccm_application -Namespace "root\ccm\clientSDK" -ComputerName $devicename | Select-Object Name)	
				#Load-DataGridView -DataGridView $datagridviewaps -Item $application
				#Write-Status -Message "Retrived Applications"
				$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $underScoreEMP -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
				Start-Sleep -Seconds 1
				
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"																	<#Note: Throw command should be the last item #>
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here

}

$datagridviewaps_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$buttonSoft_Click= {
	#TODO: Place custom script here

}

$buttonSoft_MouseClick = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $underScoreEMP -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
	Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
}

$datagridviewsoft_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$buttonRunActions_Click = {
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged = {
	#TODO: Place custom script here
	
}

$rSATToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Install-Rsat -all
}

$buttonClearCache_Click = {
	#TODO: Place custom script here
	
}

$buttonDisable_Click = {
	#TODO: Place custom script here
	
}

$buttonEnable_Click = {
	#TODO: Place custom script here
	
}


<#
try
{
	Write-Status -Message "Retrieving Storage Information..."
	
	$SysInfoDiskSpace = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3" | Select-Object DeviceID, VolumeName, @{ Name = "Size (GB)"; Expression = { "{0:N1}" -f ($_.size/1gb) } }, @{ Name = "Free Space (GB)"; Expression = { "{0:N1}" -f ($_.FreeSpace/1gb) } }, @{ Name = "Free (%)"; Expression = { "{0,6:P0}" -f (($_.freespace/1gb) / ($_.size/1gb)) } }
	
	load-datagridview -DataGridView $datagridview1 -Item $SysInfoDiskSpace
	
	
	Write-Status -Message "Successfully retrieved Storage info for $ENV:COMPUTERNAME"
}
catch
{
	
	Write-Status -Message $_.Exception.Message
}

}

#>

]]></Code>
  <Bookmarks>
    <Line>284</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>