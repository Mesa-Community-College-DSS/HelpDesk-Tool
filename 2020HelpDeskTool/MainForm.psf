<File version="3.2">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>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
GppbVPH0iZ5Xv1BHZ4+mZudc/z26dfOa2rv61FjxWPfLKtXT06euzm719w/q8c3z2rP7sFr7htTf
3aR798vU1t6mxqYmNda/1MumFvV0dyk6Mu7NS7x53Ig2rt9bF6z+2UXv7PoDCwvz3l/e9ty7FkXs
egxLr/T61aJX5968ef2rtnGJ9k8JAMuvp7x7/HsXo4h9AU67qp9dpMDuCbC45L6QhUWvDYB9OQvW
kGPF+BDxw7mejR7iSlcGAKsN09Oz3gVnbNs/53zltvl2Qa4lVwjn51yxtIbibtvv3SPG1Q8rjK9e
vfYaC867urC06IZz75lWQ8ZHhxSNjnnd7f9/u7mcjce72NPikpuOK7zutRW2ePO3UX9vXbD3bX56
2xpUlH9ODx5Xq63xhbIyT6m8qlaVT+8o13W/c/2yzpfe1Ui4Qzk5RZqcc2HADWvD/1nGm9+Yf2IA
QMSPWdt4EADwXbRl5ucA4J7bUSQr+CuvBPpHtEvC2951vPfetzbfNv+xz7XWumDdrO7Nzi+o+tEV
7dyzXyXFF3Xk6Ck19wzoyY1LOn76rCKRQZVmHtV//u8W3SjO1v/5v19oYuG1xkbjt795H8b+tlgr
CBAAEDGuBAB8V1cGACui4XBY7e3t6uzs/Oi0+R4YGPBCwFrrgnW3mmfv2VGLltpqV/yLtXfrD9q+
55gaO7pVdq3YBYA89fX1qPRsrrZv+V5bvv1GR45kKzo1r8mJcW+8f4axEEAAiKN9KV7acz/wptN9
rrV+dPN9J/P1GJtevPnB5HOtjR7iWtoyEwsAtr63tbWpubnZK6gdHR0/F1d7Hs/fei/mWuP4uZv/
fmfn2+/FG+a3bG1t9eb99wJArLv959/ZWKuis/kqe1qltqZa5WSfVnl1o15W3Pf+AigrK1dV+TM9
fvxI1VU1Gp207fTb3+H7NBYC1qoFgQ0A9oVE3bxaA5Pevv5Np32ukZHlw3CrP7st0JbMbSHv6upK
mLYC9vT0/Gp+MDlda6OHuJa2zKwMALFtzEB/vwZCYUUGw972yQ6H97tuZngwosFwSH39AxocXO4+
MLD8nhkKD/6qfzvbzPqxPXSv/1DIjXvQ7WX3uX4jXjd7tOl6w3jjGPLGb/3ExhUb/mdXvLZtlQWY
9QYAq3+zc3NeGzevzYMLBPbcLlLktWdYWtLiot2gabnNm137ZmX9/DNMqgBgV3CyPcC1ZsaMvbee
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</Preview>
  <Form>GsWK1V5UYVEAACODCAAAAAAABADtXGtz2joT/n5m3v/g4TPTYMAJzLSZMSaQtAkJ98CXjmwr4CBsjy8B+uvf
lW1CwBdkiCk9p2maCY5WWq+efXZXkv31UX7FimNf/+8fjvvqf+CclYm/5bor28HzL0NNV42F/aVh
WHP/Z56L+lOeG2DL1gz9W/lLgf7Lc5JLHNfC33TsOhYiee7JlYmm/MCrnjHD+jf56goJinDJV0tl
XKhUc5yO5jDyC/R3i4lZx/asZxgkxylTjagWiOQkQ3csg9g5T2PQ+ckyTGw5q0BWdB2jqyCC69oc
61QfaFrJc/zV14t1032iD4aKc9cNGIlRBhQiueue5WI2Ae1XMEbTMhairnanlqbP9spKRMO6Q6Vz
1/xluZjnqsXqXik6OzXDUrHVdVaE3pi2xCq1qz9/ezt4QJr+gHW361iaubY7NOvgFwxzouCgHdjb
tWkbPsddrPva37k10fTctZDngu+9Ii34mbveBclesR5eOrnrtQjHJmOYD4btxM3tzRvMR9D03kBq
WKuf9PLXC6/hWmq/l9WRg5qWpg40vMjc21QYbAKDvcFgtvHiJHlbBJ4JMRZ9G1s9Q1TVDigIAEPE
DlsrUbaOCXbwweIdbINXSAZx5/oxPaRVwMGWjhxNn1DBOn5BMAcSJiTwtLUgiN7ptoPAVwAYCriI
Y1jcHM9lbEE34o0oivUL+iW2xfXXjfe7VO3h51ZhPCy4/flgLjcHr2qTvMma0BoPeW38/P27PB+/
9YuDFRo2bPRsTr2/z6ZvcrNDlIni9dWbN5xxe1lTSi0iD7/buC9M5WH/e7u4nMK1x9GQJ9KgZY6L
wlS9HazGbbOHhqo7eu7wyry/kmY8lSMK6QhKs9/uFAcujG2OCo3VuDRwxkOhoCxuamIb/osPd/VB
S1BKHSJ3hT5+rpEhX2iKE6pK3x2VOm/KZFSnnwb8e7tnNBRmckn9dT8bvylz/te9VBvCGL/QsOo+
9drug1Re3L+K9t1Ni5dvPb2q8nzAq7ffp7K0mPRvB5rcJK/d4kAYNKvWeFiujl6V0qg3eG31RsvH
3kNh3BPLj+0RNbj4gySMPeuAHRu3ypzMBnNC1ALYrbnsqbfEHrdHDSpfb4zf0LA9uZ+3CnLpzvjR
HjXp9dpKgDmqrn5Isxr9LE3sbx+xEAUkbaIDfQLRPGiqSvA9fgnHHp9Pw0Da4JMBsroyNSzgM8PM
czXDcQwI53S0PNfRJtOoQeMiWOBtQbDUSJhN42Wpu/iC4ILUYeybpYJN5xYjiFM2Q08QC03ZQJYq
GebK76qu2UgmLI7rqx4MthUbu+DL6bu4xdR2m7C+vk2Gfu4NBQjEgAhYKQOJ8/wlg9A6aIJA8M0i
BNykdYFnFYed4vxYuxsiGAQ7YJlHnaxiQmeEgLEIrDnQbE32EhVGJTeiQ011puF5gPii2SZBK6yy
I+wvpf+l9FNQeoTTuYQMEHEBbq0LMZM4AODu4Tm4hLON6Z1mSfg/LoxFXdzpzmfV3HWxzNTcy+CQ
RxxxlLPfLj4/Ah/7BOLduHeJRXZqLKgAzft7mpkikaSSN6pGE8k7hcYCZkGvFrwsQt10dcUSOXpI
vtNVvIQCMlwQRzbvOoaZoNDHEojePK0Y4AqEZ2UWDhw/d5tsl0Y7/fk5ee5adiFP0buefFjo64Vf
ULGXV1B1u2bNWGZeWk3oQLKxFNLVVJucgC9WrvJcmSm8BzlBGdr738zh/V1NBoknpKoA05TjBGsW
V5U8d1lJB1NGVO+BaeRaALUz4SRjbrpQyDGIQalIW8PkAM3QPjoYtLQ8e8Rxzn441jx4Zw7GjRcl
ozExR81zjGzMBMc4QG5UZRJar4iBcUpRrpKIryjQxwGmiR3Oi7uEYJWj+i2QFTXrnwKdyE4gOXaR
H4xrSJlBGeKVc7E9bPGzT8rJdBqSejBc0D0kurkc4vAdQk7Nzyd1CP5gbhYKJYB1hYX/jiDnQEt2
ki3EuUGCE7Co47sAuzqHkOVReP8DEoHywWADnOU5IWOsvauZdSJQ4vMc+E86kJayywS6kvTw34j/
HTw3oOY7OAPggfP4QpT/Z5ID+OqmyQIKwiFZAKOAB5YUOv2WqL/Dg+eHQYlgZElImR6Jw8soRsgE
hhuNM4dieEM3HomeWhy7Xn/hGEmJri56az52WjhKCHJge4CIpgawjAs7+6BcZCtDPoNR3+82cyin
Ka1ALS6NXucA5T8g4Swdl3CWCixJ1ydknCzDHJdxFmnewrLC9SErKGaXcdYxNrmGhTHTLuG/IPG8
0b21+cMDfvWUAd/XNhVDHrT6xJZI+5BJodM5sOP5QTA4IHAcBk8XqePPM3wyCNMUP2mUOgcU/gEx
unhojC7C4MXI9fgMIjRLLDwmQperl4DdKsvK4ga6jHtJhwRo0TRhElFcRnqaCP3bDoIiM30xdOCJ
qHBPdYPuNcQcKUtyCABckY3MjqLnHUOxnU6IPnARbrjv1AN7NChXKuBRl1H7/Ek+FWNA9o1+MMn+
ff4/jqUP3yeiO/gstPYJJM0yzDEkXSkASfORaXg8oDLcwa/jN035fQUU7egUGHRgnP0QTC7nS3GH
S+OBmPBMRjwU17qmIKpLgRI3W223J/YfUILcIxmTzKeQ7jBJyY8yRd3uOm6mSJi380M+ZUAUvPPE
QvSR4rg5D24uTaXiLXoyVr/vU84Yyt639DhQKjjPl1XBcr6IE+snB9tVutr4IKyJ9RQwEwoHoIyN
JIMqoc499s8JWycLSUtHrMPsHxmSrtLtJB8WkQJVM49IkavL574oJk2RPkm9JvZhHSZozmSrBtQ/
wUHyJ8N0zZQcU6L+XDrZ4QPfNJmvv7Ep5vNNA7DAaQ7Xinhu95NYJ8USXMJuZ+y5Q9+o0ScPz5zw
YJgemqSOqgp9ss3uYBhWPyi0ekyZEvaHMqV/j2kwXykdQJUx7T+ihk6sDxb1g2Y/P1z+DPicJhcj
dBTQvuXS58NOnpeVTpCXbd9iCgDRfebUOVrUanQcZ4JSXAqtjk/U0q9mdR3kuHYNWZkj0fZGkpF1
8HoWDF4tZPxEykZL9h1+74UYEe/DSNz6Yl5pSn5vxA51PSEdkyDqbW7l5+bysU8wvb+OI3O8fHyp
Rxq83M3RBNO3qYDf+BPk7Vax4OYO7mebD+mVxBwA5sQzB7ULbZydWbbX7ndfgfKiAWXsKrN5G4o/
2fTaH3l3Dihip7s9huneYhYWfPgUsQFmmjVvuiPiRTeWJeyPxJLyiQqm1h6xJNzHFi9sf2DIi0+H
mkTwr+9l5+br8LFuLPQdZz9TZwi5Al5qTqInbPlBeGYjIR1pwL2ywWZfOfLRvLgqMnSC4/zhFW3y
RINGijAalC/Qhx3Da4ExZ7NgpHDTiCI4UqVwNXz+0xETDP6d7m51xd6nu3u0BRnhKVym8Hc6yO4x
hfNHWLTRE00aKcLq8Hwah+/ASPEWXf9qX/8fPREF6mFRAAA=</Form>
  <Code><![CDATA[#region Control Helper Functions

function Clear-DataGridView{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[System.Windows.Forms.DataGridView]$DataGridView
	)
	
	$DataGridView.DataSource = $null
	$DataGridView.Refresh()
}

function Load-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Update-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

#endregion

$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}

$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				##Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				##$tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				##same scope as the scriptblock we're in now.
				
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" -Fast -CollectionId 'MC10000A' | select name
				$global:devicename = $getdevicename.name

			
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			##Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		<#Sets the captured devicename in the text box#>
				$buttonChange.Text = 'Connect' 																		<# Change the text in the label.#>
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	<#Finds the ADOU of the Device#>
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									<#Sets the AD text box with the AD OU cuts base of OU#>
				Write-Status -Message "Device found Click Connect"
				

			
				
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message "Testing connectivity..."
			
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet)) 								<# Test to ensure the remote client can be pinged#>
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				<#Collect Apps from the device and load them into the datagrid assigned.#>
				$global:underscore = Get-Credential
				$application = (Get-CimInstance -ClassName ccm_application -Namespace "root\ccm\clientSDK" -ComputerName $devicename | Select-Object Name)	
				Load-DataGridView -DataGridView $datagridviewaps -Item $application
				Write-Status -Message "Retrived Applications"
				Start-Sleep -Seconds 1
				
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"																	<#Note: Throw command should be the last item #>
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here

}

$datagridviewaps_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$buttonSoft_Click= {
	#TODO: Place custom script here
}

$buttonSoft_MouseClick = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	Write-Status -Message "Finding Software..."
	$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
	Write-Status -Message "Updating Gridview"
	Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware 
}

$datagridviewsoft_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$buttonRunActions_Click = {
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged = {
	#TODO: Place custom script here
	
}

$rSATToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Install-Rsat -all
}

$buttonClearCache_Click = {
	#TODO: Place custom script here
	
}

$buttonDisable_Click = {
	#TODO: Place custom script here
	
}

$buttonEnable_Click = {
	#TODO: Place custom script here
	
}


]]></Code>
  <Bookmarks>
    <Line>284</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>