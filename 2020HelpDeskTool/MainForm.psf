<File version="3.2">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>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
0AAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions

function Clear-DataGridView{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[System.Windows.Forms.DataGridView]$DataGridView
	)
	
	$DataGridView.DataSource = $null
	$DataGridView.Refresh()
}

function Load-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Update-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

#endregion

$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}

$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				##Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				##$tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				##same scope as the scriptblock we're in now.
				
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" -Fast -CollectionId 'MC10000A' | select name
				$global:devicename = $getdevicename.name

			
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			##Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		<#Sets the captured devicename in the text box#>
				$buttonChange.Text = 'Connect' 																		<# Change the text in the label.#>
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	<#Finds the ADOU of the Device#>
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									<#Sets the AD text box with the AD OU cuts base of OU#>
				Write-Status -Message "Device found Click Connect"
				
				Write-Status -Message 'Software...'
				$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware

			
				
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message "Testing connectivity..."
			
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet)) 								<# Test to ensure the remote client can be pinged#>
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				<#Collect Apps from the device and load them into the datagrid assigned.#>
				#$global:underscoreEMP = Get-Credential
				#Write-Status -Message 'Retrieving Software...'
				#$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $global:underscoreEMP -ComputerName $global:devicename -Verbose | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				#Write-Status -Message 'Software has been retrieved. Updating Gridview...'
				#Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware -ErrorAction Stop
				
				
				#$application = (Get-CimInstance -ClassName ccm_application -Namespace "root\ccm\clientSDK" -ComputerName $devicename | Select-Object Name)	
				#Load-DataGridView -DataGridView $datagridviewaps -Item $application
				#Write-Status -Message "Retrived Applications"
				Start-Sleep -Seconds 1
				
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"																	<#Note: Throw command should be the last item #>
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here

}

$datagridviewaps_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$buttonSoft_Click= {
	#TODO: Place custom script here

}

$buttonSoft_MouseClick = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
	Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
}

$datagridviewsoft_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$buttonRunActions_Click = {
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged = {
	#TODO: Place custom script here
	
}

$rSATToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Install-Rsat -all
}

$buttonClearCache_Click = {
	#TODO: Place custom script here
	
}

$buttonDisable_Click = {
	#TODO: Place custom script here
	
}

$buttonEnable_Click = {
	#TODO: Place custom script here
	
}


<#
try
{
	Write-Status -Message "Retrieving Storage Information..."
	
	$SysInfoDiskSpace = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3" | Select-Object DeviceID, VolumeName, @{ Name = "Size (GB)"; Expression = { "{0:N1}" -f ($_.size/1gb) } }, @{ Name = "Free Space (GB)"; Expression = { "{0:N1}" -f ($_.FreeSpace/1gb) } }, @{ Name = "Free (%)"; Expression = { "{0,6:P0}" -f (($_.freespace/1gb) / ($_.size/1gb)) } }
	
	load-datagridview -DataGridView $datagridview1 -Item $SysInfoDiskSpace
	
	
	Write-Status -Message "Successfully retrieved Storage info for $ENV:COMPUTERNAME"
}
catch
{
	
	Write-Status -Message $_.Exception.Message
}

}

#>

]]></Code>
  <Bookmarks>
    <Line>284</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>