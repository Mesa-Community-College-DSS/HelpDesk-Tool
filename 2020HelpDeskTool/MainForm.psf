<File version="3.2">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>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
JQBgQAIA+hIAEMMrAQADEgDQlwCAGF4JABiQAIC+BADE8EoAwIAEAPQlACCGVwIABiQAoC8BADG8
EgAwIAEAfQkAiOGVAIABCQDoSwBADK8EAAxIAEBfAgBieCUAYEACAPoSABDDKwEAAxIA0JcAgBhe
CQAYkACAvgQAxPBKAMCABAD0JQAghlcCAAYkAKAvAQAxvBIAMCABAH0JAIjhlQCAAQkA6EsAQAyv
BAAMSABAXwIAYnglAGBAAgD6EgAQwysBAAMSANCXAIAYXgkAGJAAgL4EAMTwSgDAgAQA9CUAIIZX
AgAGJACgLwEAMbwSADAgAQB9CQCI4ZUAgAHfFAAOHTqk7OxsZWVlYYJ47do17d+/Xw0NDQQAxJBJ
AMCA8QLA5OSkkpKSdOrUKZ08eRITxNOnT+vAgQPq6urSwsICAQAxRBIAMODWAOCv3+npafdFmfMe
MbG09T4zM6PZ2dlfvg+I+PlLAMCA8QKArV9MbP3vAiKGQwIABowXABARMVwSADAgAQARMfwSADAg
AQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQAR
MfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwS
ADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAg
AQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQAR
MfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwS
ADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAg
AQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQAR
MfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwS
ADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAg
AQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQAR
MfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfwSADAgAQARMfxuawAYGhrSgQMH
lJOTo6ysLPxMzc7O1sGDBxWJRF75siAiYnjctgBgjo2N6dSpU54nT57Ez1Rbf2fOnNHExMQr6xcR
EcPjtgaA6elpN7M57xE/b/31uHX9IiJieNzWAGCnATBcbl2/iIgYHrc1ACAiIuLnIQEAERExASUA
ICIiJqAEAERExASUAICIiJiAEgAQERETUAIAIiJiAkoAQERETEAJAIiIiAkoAQARETEBJQAgIiIm
oAQARETEBJQAgIiImIASABARERNQAgAiImICSgBARERMQAkAiIiICSgBABERMQElACAiIiagBABE
RMQElACAiIiYgBIAEBERE1ACACIiYgJKAEBERExACQCIiIgJKAEAERExASUAICIiJqAEAERExASU
AICIiJiAEgAQERETUAIAIiJiAkoAQERETEA/KgAsLFgIQERExM/NBeezZ/PvHwB6R+c0NTmhyclJ
RERE/Mycck5MTKrnQ44APHs2p7k5RERE/Nx85pydnXv/IwB90XmtrKxoYWFBy8vLscMJC4veczus
sLi45FzU0tKSlhYXfj3s4E2/4sYtxM5DzNvrJe+5TR+bz0LsfUuLbiGD5y0QERHx4/zgNgCR6QXV
VZVraGBIVdWPtLCypqnRIdW45zPP5jU20quMS5d083aJJmZi5xqWXVGffzajhofVGopMesGguuSO
ziSdV+9QRNHRqJZcgBgfG1fn4xY1tnS6kBELB4iIiLh9Wl2edz/C3zsATC6uKPXkIV26eFnff7NX
F5NTdfH8OR3cd1Bp6Vd09sxRFRQ9VFdTlX78/melpVxW6qUUnTuXqiPf/V37jiRraXVT0aePlZNz
S0111cqw9506rWvX8nVwz17de9Cozc21uAuOiIiIH6YdaZ+entKo++Hd64r6ewWA6OyiCq5fVU93
v9IvnNf3P/2oM+cv6tThQzp89IxSU88q+UKqbhfc07kzp/XjgYO6kp2lY0cO6+SB/Tp66qIm5pY0
Odile/fK9LCiVOkuABz+eb9yr+bpiHusetSh9fWVuAuPiIiI768V/9nZWXV3d6m7p8cr/u8VAAbG
5jU3OxNrSDA/r6nJcU3NPlP/k0bdvl2k+aVlDfY91VBkXOury4qMRjQ1NanIyKjXVsDeOz0zo/ln
1ghhVovPZtTT1eO1AehzCzQ5Nes1ULC+Buw8BSIiIn6cdvm+/fLv7u5WY0O9evv63j8A9FlHQC5F
zLkZWgCwom6pYv5lQ0Ar5ItLS96wuWexRoF2rmFhcdGb3p5bErFx9tqbxoUGaxRojzZvuz7RGigg
IiLix2u1NTIa9X759/X2aXgkot7x5XcLAJk5+SmTq1L36KLXcAARERE/D+2a/96xWME3rfh3u9eD
U2tvDwApaZlX559LAy/fjIiIiJ+vVvzHnj1/ewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAgJ3kn/7p/wNW3/BW+r6rWgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions

function Clear-DataGridView{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[System.Windows.Forms.DataGridView]$DataGridView
	)
	
	$DataGridView.DataSource = $null
	$DataGridView.Refresh()
}

function Load-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Update-DataGridView{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

#endregion

$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}

$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				##Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				##$tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				##same scope as the scriptblock we're in now.
				
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" -Fast -CollectionId 'MC10000A' | select name
				$global:devicename = $getdevicename.name

			
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			##Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		<#Sets the captured devicename in the text box#>
				$buttonChange.Text = 'Connect' 																		<# Change the text in the label.#>
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	<#Finds the ADOU of the Device#>
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									<#Sets the AD text box with the AD OU cuts base of OU#>
				Write-Status -Message "Device found Click Connect"										
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message 'Authenticating...'
			$global:underScoreEMP = Get-Credential -Message 'Enter Employee Underscore Credentials'
			Write-Status -Message "Testing connectivity..."
			
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet)) 								<# Test to ensure the remote client can be pinged#>
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				<#Collect Apps from the device and load them into the datagrid assigned.#>								
				#$application = (Get-CimInstance -ClassName ccm_application -Namespace "root\ccm\clientSDK" -ComputerName $devicename | Select-Object Name)	
				#Load-DataGridView -DataGridView $datagridviewaps -Item $application
				#Write-Status -Message "Retrived Applications"
				$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $underScoreEMP -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
				Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
				Start-Sleep -Seconds 1
				
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"																	<#Note: Throw command should be the last item #>
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here

}

$datagridviewaps_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$buttonSoft_Click= {
	#TODO: Place custom script here

}

$buttonSoft_MouseClick = [System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$getsoftware = get-wmiobject -class Win32Reg_AddRemovePrograms -Credential $underScoreEMP -ComputerName $devicename | Select-Object DisplayName, Version, Publisher | Sort-Object -Property @{ Expression = "DisplayName"; Ascending = $True }, @{ Expression = "Version"; Descending = $False }, @{ Expression = "Publisher"; Descending = $False }
	Update-DataGridVieW -DataGridView $datagridviewsoft -Item $getsoftware
}

$datagridviewsoft_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
}

$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$buttonRunActions_Click = {
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged = {
	#TODO: Place custom script here
	
}

$rSATToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Install-Rsat -all
}

$buttonClearCache_Click = {
	#TODO: Place custom script here
	
}

$buttonDisable_Click = {
	#TODO: Place custom script here
	
}

$buttonEnable_Click = {
	#TODO: Place custom script here
	
}


<#
try
{
	Write-Status -Message "Retrieving Storage Information..."
	
	$SysInfoDiskSpace = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3" | Select-Object DeviceID, VolumeName, @{ Name = "Size (GB)"; Expression = { "{0:N1}" -f ($_.size/1gb) } }, @{ Name = "Free Space (GB)"; Expression = { "{0:N1}" -f ($_.FreeSpace/1gb) } }, @{ Name = "Free (%)"; Expression = { "{0,6:P0}" -f (($_.freespace/1gb) / ($_.size/1gb)) } }
	
	load-datagridview -DataGridView $datagridview1 -Item $SysInfoDiskSpace
	
	
	Write-Status -Message "Successfully retrieved Storage info for $ENV:COMPUTERNAME"
}
catch
{
	
	Write-Status -Message $_.Exception.Message
}

}

#>

]]></Code>
  <Bookmarks>
    <Line>284</Line>
  </Bookmarks>
  <BreakPoints />
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>