<File version="3.1">
  <FileID>7c51d290-6b7b-4547-96e0-b1c2de826afb</FileID>
  <Preview>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</Preview>
  <Form>vx71HoqZnCcAACODCAAAAAAABADdWltv4jgUfl9p/4OVZ9RCuEsUiSbDdLRtpypM97FygkuzmDhKnBbm1+9J
QgoBJ7Fpg9hVJdQEH5/bdz4f2wx+Wv8QmwfDP/9AaJA8IL72yJU2WQecLC/+dtwZew8uxsxfJp81
JPqqhp6IHzjMvWpd1KO/GjJCykOfXLkk5D6mNfQQWtSx/yLrKVsQ98rqdnHbbnca/WaL1Ht9Dbl4
CZpfYL4bQj2TBIspY1RD9qtDZz6IaAZzuc9ooMUWg80PPvOIz9cb2VHI2cTGlJjOkriRPTC0U0ON
5uAyHVomesdmRBuOQVOpjEEd4vKJ8xsEGrreqqFWv1cqdYcd94644YT7jpd6AsMeyQsBL22yGQce
hEE0pqGhy3Sussnv4VMb7sewVGxKVlwbpiJILPPtDbzdCNwyPDvU8xy9HlzGA1Opclh991noXbNV
5dCaR4osttKLMHUYnFtmYw4GQJLbgKVu4yA0eXn4UCghkcCo2dVrSO/3JQSm2PrhzshKGx5iTjh6
whngbYxpQGQEYkiMPA8iG7sfSAj9CojBlh6MtyiJZngkYKLvuHNtOPVDod5ygJiY4+++M3tyyHvl
IJmBsjkoewNljWKgCBiB0XDp3hAMTgc3xJm/xvSQcEpMMfAkCMLhTCazF5Ashx4WYjFGmwDRjpRM
gtGMv1JyG6R2gFj1Xl1KZItV0fjBZYKBD5LLPp4hg5QAo4BBID1NdQKRkUgJJOIova1EICK8fBGB
mOTNsWWGV0Md0USnAAYHPeW4KERGvVtDPRHx54Ej1alQtHorKlrVmhWuL9kilUrGLbYIrTwVE8O4
M4r7RpG7KTvnoq2sMeiLVvm83G2MVEhdvx71HoqZkxwfV2pkEgKbKGQRnJKSPKZozxY4I/PkmGnL
JSjBzMhUgEvrGLjI9Q2bztBEP3+dE0hORvUrPjIhjZ+k+nZLheo3OiunelHfsLf1i+JsvGJ3TmZb
w5533mY3gMcl8zrknLmV59KK1SR2q+bzGtsLoEvma8PNcKlYjynmE76mkKIH5oWeImvo3R6kVWWp
2fVRAT9RH6kfnpsUw0cO0wmBjCGnyOHonr1XRSPCSZ6cIMQ0TsFOCvO62j3wG4CqRTamz/G7rwD9
CRkM1Ezx/JMUpitSWKJUAYONTvsIDssBbRGHJZZ9NYmdpm2hkRaw/j5cWsQ/eQujq7QwWVsVkNDp
HtHOyLFkwkZgFFKw6vM9jfopx0nXxMfQHcX7gEDtqMPAYUCCJ0yd2QYksucFu+TS60ODJHOGsbvE
bU2WPi3JXeTUOiQxpMAeJG/QMYiSXdzy5HNXtm0oRaubOnQnHPMwuMZ+5egNYk0W9o8+ogPlra7M
iViCva1CadQld0XCJi4fdzLTS13jKCfv47Kq8uTtXnmpJO8HGJVd5aI3ha0WhCb2KXIuGlydbztm
CW75Xhyo9n1jthd+Scaid/9J7zgYEqi5p7RSgMXCCwVhpW7RpVqpoj5X8YpDWKkFFmXKNPsgsZE4
Xf4LYZxz22zCo8ne3b2yPVNYH4CarBxeiOkMomWv7EUBLJVN73yEu6S8bTfd7wXOH17ikBcGVCgi
GdC+LlyexQH9BoqKfyyxaa2EFh32V+efjRxW/39Wuz8ZTb+82sURlERnS6XcIyX724/zR5g46IUh
FYpIRrRRbygU/CNokip4oUmFBZ/+Gwz/BUxXXLucJwAA</Form>
  <Code><![CDATA[
$formHelpDeskTool_Load={
	#TODO: Initialize Form Controls here
	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formHelpDeskTool.close()
}


$buttonChange_Click = {
	
	if ($buttonChange.Text -eq "Find it Now")
	{
		try
		{
			if (-not $txtBoxTag.Text) ## If the Connect text box is empty
			{
				## Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				Write-Status -Message "Enter Tag Number..."
				throw 'No computer specified for connection'
			}
			else
			{
				## $tagnumber and $devicename must be global because they be referenced in various functions that will not be in the
				## same scope as the scriptblock we're in now.
				$global:tagnumber = $txtBoxTag.Text
				$getdevicename = Get-CMDevice -Name "*$tagnumber*" | select name
				$global:devicename = $getdevicename.name
			}
						
			Write-Status -Message "Checking for Device HostName..."
			Start-Sleep -Milliseconds 500
			## Test to find HostName of computer in SCCM
			if (-not $devicename)
			{
				throw 'Device does not exist.'
			}
			else
			{
				$txtBoxTag.Text = $devicename																		#Sets the captured devicename in the text box
				$buttonChange.Text = 'Connect' 																		# Change the text in the label.
				$adloc = Get-ADComputer -Identity "$devicename" -Properties CanonicalName | select CanonicalName	#Finds the ADOU of the Device
				$txtADLoc.Text = $adloc.CanonicalName -replace "ad.mc.local/MCC/"									#Sets the AD text box with the AD OU cuts base of OU
				Write-Status -Message "Device found Click Connect"
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Connect")
	{
		try
		{
			Write-Status -Message "Testing connectivity..."
			## Test to ensure the remote client can be pinged
			if (-not (Test-Connection -ComputerName "$devicename" -Count 1 -Quiet))
			{
				$buttonChange.Text = 'Find it Now'
				$txtBoxTag.Text = ""
				throw 'Computer is offline or does not exist.'
			}
			else {
				## The throw command is typically used for error handling. However, in a GUI, it can also be a great way to simply
				## act as status messaging as well.
				$buttonChange.Text = 'Disconnect' # Change the text in the label.
				throw "Connected to $devicename"
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	elseif ($buttonChange.Text -eq "Disconnect")
	{
		Try
		{
			$txtBoxTag.Text = ""
			Write-Status -Message "Disconnecting"
			Start-Sleep -Seconds "3"
			$buttonChange.Text = "Find it Now"
			Write-Status -Message "Enter Tag Number"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
}

$txtBoxTag_TextChanged={
	#TODO: Place custom script here
		
}

$txtBoxTag_KeyDown = [System.Windows.Forms.KeyEventHandler]
{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if ($_.KeyCode -eq 'Enter')
	{
		&$buttonChange_Click
	}
}
$buttonRunActions_Click={
	#TODO: Place custom script here
	if ($result -ne $null)
	{
		if ($result -eq [System.Windows.Forms.DialogResult]::OK)
		{
			$x = $listBox.SelectedItem
			If ($x -eq "Update Software Actions")
			{
				Start-CMClientAction -SCCMSoftwareAction
			}
			elseif ($x -eq "Update All Policies (Note: May take over an hour)")
			{
				Start-CMClientAction -SCCMActionsBundle
			}
			elseif ($x -eq "Update Machine Actions")
			{
				Start-CMClientAction -SCCMMachineBundle
			}
		}
	}
	else { }
}

$txtADLoc_TextChanged={
	#TODO: Place custom script here

}

$rSATToolStripMenuItem_Click={
	#TODO: Place custom script here
	Install-Rsat -all
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


#endregion
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>